profile = "project-management/tasks@1.1"
provider = "asana"

map CreateTask {
  http POST "/tasks" {
    security "personalAccessToken"
    request "application/json" {
      body {
        data = {
          name: input.title,
          notes: input.description,
          projects: [input.project],
          parent: input.parent,
          assignee: input.assignee
        }
      }
    }

    response 201 "application/json" {
      data = call MapTask(task = body.data)

      return map result data
    }

    response {
      error = call MapAsanaError(
        statusCode = statusCode,
        error = body,
        headers = headers
      )

      map error error
    }
  }
}

map ListTasks {
  http GET "/projects/{input.id}/tasks" {
    security "personalAccessToken"
    
    response 200 "application/json" {
      data = body.data.map(task => ({
        id: task.gid,
        title: task.name,
      }))

      return map result data
    }

    response {
      error = call MapAsanaError(
        statusCode = statusCode,
        error = body,
        headers = headers
      )

      map error error
    }
  }
}

map ReadTask {
  http GET "/tasks/{input.id}" {
    security "personalAccessToken"
    
    response 200 "application/json" {
      data = call MapTask(task = body.data)

      return map result data
    }

    response {
      error = call MapAsanaError(
        statusCode = statusCode,
        error = body,
        headers = headers
      )

      map error error
    }
  }
}

map UpdateTask {
  http PUT "/tasks/{input.id}" {
    security "personalAccessToken"
    request "application/json" {
      body {
        data = {
          name: input.title,
          notes: input.description,
          projects: input.projects,
          parent: input.parent,
          assignee: input.assignee
        }
      }
    }

    response 200 "application/json" {
      data = call MapTask(task = body.data)

      return map result data
    }

    response {
      error = call MapAsanaError(
        statusCode = statusCode,
        error = body,
        headers = headers
      )

      map error error
    }
  }
}

map DeleteTask {
  http DELETE "/tasks/{input.id}" {
    security "personalAccessToken"
    
    response 200 "application/json" {}

    response {
      error = call MapAsanaError(
        statusCode = statusCode,
        error = body,
        headers = headers
      )

      map error error
    }
  }
}

"""
Operation MapTask
Returns mapped task from received body
"""
operation MapTask {
  task.id = args.task.gid

  task.projects = args.task.projects.map(project => project.gid)

  set if (args.task.name) {
    task.title = args.task.name
  }

  set if (args.task.notes) {
    task.description = args.task.notes
  }

  set if (args.task.parent) {
    task.parent = args.task.parent
  }

  set if (args.task.assignee) {
    task.assignee = args.task.assignee.gid
  }

  set if (args.task.permalink_url) {
    task.url = args.task.permalink_url
  }

  return task
}

"""
Operation Map Asana Error
Returns error object based on error body, statusCode.
"""
operation MapAsanaError {
  statusCode = args.statusCode

  detail = args.error.message

  headers = args.headers

  return if (statusCode === 400) {
    title = "Bad request"
    detail = detail
  }

  return if (statusCode === 401) {
    title = "Unauthorized"
    detail = detail
  }

  return if (statusCode === 403) {
    title = "Forbidden"
    detail = detail
  }

  return if (statusCode === 404) {
    title = "Not found"
    detail = detail
  }

  return if (statusCode === 405) {
    title = "Method not allowed"
    detail = detail
  }

  return if (statusCode === 429) {
    retryAfter = parseInt(headers['Retry-After'])
    title = "Too Many Requests"
    detail = `${detail}. Retry after ${retryAfter} seconds`
  }

  return if (statusCode === 502) {
    title = "Bad gateway"
    detail = detail
  }

  return {
    title = "Unknown error"
    detail = `Unknown error occurred. Status: ${statusCode}. Message: ${detail}.`
  }
}
