profile = "social-media/posts-comments@1.0"
provider = "linkedin"

map GetPostComments {
  count = 10
  inputPage = parseInt(input.page, 10)
  start = isNaN(inputPage) ? 0 : inputPage

  http GET "/v2/socialActions/{input.id}/comments?count={count}&start={start}" {
    request {
      headers {
        "Authorization" = `Bearer ${parameters.accessToken}`,
      }
    }
    response 200 "application/json" {
      // LinkedIn returns paging.links but it seems they have a bug with double encoding projection parameter: https://stackoverflow.com/q/71250137/240963
      // Instead we will just calculate next and previous pages' URLs ourselves
      paging = body.paging
      result = {
        previousPage: (paging.start > 0) ? `${Math.max(0, paging.start - paging.count)}` : undefined,
        // count is passed value, not the real count of items
        nextPage: (paging.start + paging.count) < paging.total ? `${paging.start + paging.count}` : undefined,
      }

      result.comments = body.elements.map((element) => {
        return {
          id: element["$URN"],
          text: element.message.text,
          created: {
            user: element.created.actor,
            time: element.created.time
          },
          lastModified: {
            user: element.lastModified.actor,
            time: element.lastModified.time
          }
        }
      })

      map result result
    }
  }
}
