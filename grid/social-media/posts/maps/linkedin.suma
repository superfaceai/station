profile = "social-media/posts@1.0"
provider = "linkedin"

// Uses LinkedIn's Posts API: https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/posts-api

"""
Retrieve posts from LinkedIn profile
Requires `r_organization_social` scope for reading data from organization's profile.
"""
map GetProfilePosts {
  count = 10
  inputPage = parseInt(input.page, 10)
  start = isNaN(inputPage) ? 0 : inputPage

  imagesToResolve = {}
  videosToResolve = {}
  result = undefined

  // We need tight control over parameters encoding, which isn't the case with query construct
  queryParams = `?q=author&author=${encodeURIComponent(input.profileId)}&count=${count}&start=${start}`
  
  // https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/posts-api?view=li-lms-2023-02&tabs=http#find-posts-by-authors
  http GET "/rest/posts{queryParams}" {
    request {
      headers {
        "X-Restli-Protocol-Version" = "2.0.0",
        "LinkedIn-Version" = "202302",
        "Authorization" = `Bearer ${parameters.accessToken}`,
      }
    }
  
    response 200 "application/json" {
      // LinkedIn returns paging.links but it seems they have a bug with double encoding projection parameter: https://stackoverflow.com/q/71250137/240963
      // Instead we will just calculate next and previous pages' URLs ourselves
      paging = body.paging
      previousPage = (paging.start > 0) ? `${Math.max(0, paging.start - paging.count)}` : undefined,
      // count is passed value, not the real count of items
      nextPage = (paging.start + paging.count) < paging.total ? `${paging.start + paging.count}` : undefined,
  
      posts = body.elements.map((element) => {
        const attachments = [];
        if (element.content) {
          const c = element.content;
          if (c.article) {
            // https://learn.microsoft.com/en-us/linkedin/marketing/integrations/ads/advertising-targeting/version/article-ads-integrations?view=li-lms-2023-02&tabs=http
            attachments.push({
              type: 'link',
              url: c.article.source,
              title: c.article.title,
              description: c.article.description,
              // TODO preview: c.article.thumbnail -> need to fetch its URL
            })
          }
          if (c.media) {
            // https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/posts-api?view=li-lms-2023-02&tabs=http#media
            // TODO: fetch URLs
            const id = c.media.id;
            let attachmentType = undefined;
            // urn:li:image:C4E10AQGEOVxaD7kt6Q or urn:li:video:C5610AQES9koZnXb88Q
            if (id.includes(':video:')) {
              if (videosToResolve[id]) {
                videosToResolve[id]
              } else {
                const a = {
                  type: 'video',
                  title: c.media.title,
                  altText: c.media.altText,
                }
                attachments.push(a);
                videosToResolve[id] = a;
              }
            } else if (id.includes(':image:')) {
              // Keep the same reference
              if(imagesToResolve[id]) {
                attachments.push(imagesToResolve[id]);
              } else {
                const a = {
                  type: 'image',
                  altText: c.media.altText,
                };
                attachments.push(a);
                imagesToResolve[id] = a;
              }
            }
          }
          if (c.multiImage) {
            // https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/multiimage-post-api?view=li-lms-2023-02&tabs=http
            c.multiImage.images.forEach(img => {
              if(imagesToResolve[img.id]) {
                attachments.push(imagesToResolve[img.id]);
              } else {
                const a = {
                  type: 'image',
                  altText: img.altText,
                };
                attachments.push(a);
                imagesToResolve[img.id] = a;
              }
            })
          }
          // FIXME: polls, carousels
        }

        const post = {
          id: element.id,
          text: element.commentary || '',
          createdAt: std.unstable.time.unixTimestampToIsoDate(element.publishedAt || element.createdAt),
          lastModifiedAt: std.unstable.time.unixTimestampToIsoDate(element.lastModifiedAt),
          url: `https://www.linkedin.com/feed/update/${element.id}`,
          attachments: attachments,
        }
        return post;
      });

      result = {
        nextPage: nextPage,
        previousPage: previousPage,
        posts: posts,
      }
    }

    response 400 "application/json" {
      return map error {
        title = body.code || "Bad Request",
        detail = body.message,
      }
    }
    response 401 "application/json" {
      return map error {
        title = body.code || "Unauthorized",
        detail = body.message,
      }
    }
    response 403 "application/json" {
      return map error {
        title = body.code || "Forbidden",
        detail = body.message,
      }
    }
    response 404 "application/json" {
      return map error {
        title = body.code || "Resource Not Found",
        detail = body.message,
      }
    }
  }

  set {
    imagesIds = Object.keys(imagesToResolve)
    videoIds = Object.keys(videosToResolve)
  }
  return map result if (imagesIds.length === 0 && videoIds.length === 0) result

  call ResolveMedia(type = "images", accessToken = parameters.accessToken, mediaIds = imagesIds) if (imagesIds.length > 0) {
    // Just bail out without resolution
    return map result if (outcome.error) result

    dummy = Object.entries(outcome.data).forEach(([id, img]) => {
      if (!img.downloadUrl) {
        return;
      }
      imagesToResolve[id].url = img.downloadUrl;
    })
  }

  call ResolveMedia(type = "videos", accessToken = parameters.accessToken, mediaIds = videoIds) if (videoIds.length > 0) {
    // Just bail out without resolution
    return map result if (outcome.error) result

    dummy = Object.entries(outcome.data).forEach(([id, vid]) => {
      if (!vid.downloadUrl) {
        return;
      }
      const attachment = videosToResolve[id];
      attachment.url = vid.downloadUrl;
      attachment.preview = vid.thumbnail;
      attachment.duration = vid.duration;
    })
  }

  map result result
}

operation ResolveMedia {
  queryParams = `?ids=List(${args.mediaIds.map(encodeURIComponent).join(',')})`
  pathName = args.type === 'videos' ? 'rest/videos' : 'rest/images'
  http GET "/{pathName}{queryParams}" {
    security none
  
    request {
      headers {
        "X-Restli-Protocol-Version" = "2.0.0",
        "LinkedIn-Version" = "202302",
        "Authorization" = `Bearer ${args.accessToken}`,
      }
    }
  
    response 200 "application/json" {
      return body.results
    }
  
    response 400 "application/json" {
      fail {
        title = body.code || "Bad Request",
        detail = body.message,
      }
    }
    response 401 "application/json" {
      fail {
        title = body.code || "Unauthorized",
        detail = body.message,
      }
    }
    response 403 "application/json" {
      fail {
        title = body.code || "Forbidden",
        detail = body.message,
      }
    }
    response 404 "application/json" {
      fail {
        title = body.code || "Resource Not Found",
        detail = body.message,
      }
    }
  }
}
