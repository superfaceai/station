profile = "social-media/publishing-profiles@1.1"
provider = "twitter"

"""
Get authenticated user
https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-me
"""
map GetProfilesForPublishing {
  http GET "/2/users/me" {
    request {
      query {
        "user.fields" = "id,name,profile_image_url,username"
      }
      headers {
        authorization = "Bearer " + parameters.accessToken
      }
    }

    response 200 "application/json" {
      profile = body.data

      return map result {
        profiles = [{
          id: profile.id,
          name: profile.name,
          username: profile.username,
          imageUrl: profile.profile_image_url,
        }],
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response {
      error = call MapTwitterError(statusCode = statusCode, error = body, headers = headers)
      map error error
    }
  }
}

//Twitter rate limits: https://developer.twitter.com/en/docs/twitter-api/rate-limits
operation MapRateLimit {
  totalRequestsHeader = args.headers['x-rate-limit-limit']
  remainingRequestsHeader = args.headers['x-rate-limit-remaining']
  resetTimestampHeader = args.headers['x-rate-limit-reset']

  totalRequests = undefined
  remainingRequests = undefined
  remainingRequestsPercentage = undefined
  resetTimestamp = undefined

  set if(totalRequestsHeader && parseInt(totalRequestsHeader, 10) !== 'NaN') {
    totalRequests = parseInt(totalRequestsHeader, 10)
  }

  set if(remainingRequestsHeader && parseInt(remainingRequestsHeader, 10) !== 'NaN') {
    remainingRequests = parseInt(remainingRequestsHeader, 10)
  }

  set if(totalRequests > 0 && remainingRequests !== undefined) {
    remainingRequestsPercentage = remainingRequests / totalRequests * 100
  }

  set if(resetTimestampHeader && parseInt(resetTimestampHeader, 10) !== 'NaN') {
    resetTimestamp = parseInt(resetTimestampHeader, 10)
  }  

  return {
    bucket = 'User lookup'
    totalRequests = totalRequests
    remainingRequests = remainingRequests
    remainingRequestsPercentage = remainingRequestsPercentage
    resetTimestamp = resetTimestamp
  }
}

//Twitter errors: https://developer.twitter.com/en/support/twitter-api/error-troubleshooting
operation MapTwitterError {
  statusCode = args.statusCode
  twitterError = args.error
  headers = args.headers

  rateLimit =  call MapRateLimit(headers = headers)

  return if (statusCode === 400) {
    title = "Bad request"
    detail = twitterError.detail
    code = 'BadRequest'
    rateLimit = rateLimit
  }

  return if (statusCode === 401) {
    title = "Unauthenticated"
    detail = twitterError.detail
    code = 'Unauthenticated'
    rateLimit = rateLimit
  }

  return if (statusCode === 403) {
    title = "Unauthorized"
    detail = twitterError.detail
    code = 'Unauthorized'
    rateLimit = rateLimit
  }

  return if (statusCode === 404) {
    title = "Not found"
    detail = twitterError.detail
    code = 'NotFound'
    rateLimit = rateLimit
  }

  return if (statusCode === 429) {
    title = "Rate limit exceeded"
    detail = `Twitter API resource '${rateLimit.bucket}' reached max requests quota.`
    code = 'RateLimitReached'
    rateLimit = rateLimit
  }

  return {
    title = "Unknown error"
    detail = (`Unknown error occurred. Status: ${statusCode}`)
    code = 'UnknownError'
    rateLimit = rateLimit
  }
}

