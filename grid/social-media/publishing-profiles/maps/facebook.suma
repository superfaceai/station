profile = "social-media/publishing-profiles@1.1"
provider = "facebook"

"""
Get Facebook Pages for publishing
https://developers.facebook.com/docs/graph-api/reference/user/accounts/
https://developers.facebook.com/docs/graph-api/reference/page/
"""
map GetProfilesForPublishing {
  apiVersion = 'v12.0'

  http GET "/{apiVersion}/me/accounts" {
    request {
      query {
        access_token = parameters.accessToken
        fields = "id,name,can_post,link,username,picture{url}"
      }
    }

    response 200 "application/json" {
      pages = call foreach(page of body.data) MapPage(page = page)

      return map result {
        profiles = pages
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response {
      error = call MapFacebookError(statusCode = statusCode, error = body.error, headers = headers)
      map error error
    }

  }
}

operation MapPage {
  page = args.page

  // TODO: Handle can_post

  return {
    id = page.id
    name = page.name
    username = page.username
    imageUrl = page.picture.data.url
  }
}

//Facebook rate limits: https://developers.facebook.com/docs/graph-api/overview/rate-limiting
operation MapRateLimit {
  appUsageHeader = args.headers['x-app-usage']
  appUsageHeaderParsed = undefined
  usedRequestsPercentage = undefined
  remainingRequestsPercentage = undefined

  set if (appUsageHeader) {
    appUsageHeaderParsed = JSON.parse(appUsageHeader)
  }

  set if (appUsageHeaderParsed) {
    usedRequestsPercentage = parseInt(appUsageHeaderParsed.call_count, 10)
  }

  set if(!isNaN(usedRequestsPercentage)) {
    remainingRequestsPercentage = 100 - usedRequestsPercentage
  }

  // TODO: add CPU time and time rate limit values to th outcome (remainingCPUTimePrecentage and remainingTimePercentage)

  return {
    bucket = 'Facebook' //Facebook uses generic rate limits for me/accounts endpoint
    remainingRequestsPercentage = remainingRequestsPercentage
  }
}

// Facebook error handling: https://developers.facebook.com/docs/graph-api/guides/error-handling
operation MapFacebookError {
  statusCode = args.statusCode
  facebookError = args.error
  headers = args.headers

  rateLimit =  call MapRateLimit(headers = headers)

  detail = facebookError.message

  
  //Facebook errors are described by body parameters: message, type, code, error_subcode. Facebook returns HTTP status codes 400, 401, 403 but status code is not significant.
  return if (facebookError.type !== 'OAuthException') {
    title = "Unknown error"
    detail = (`Unknown error occurred. Type: ${facebookError.type}. Message:  ${facebookError.message}. Type:  ${facebookError.type}`)
    code = 'UnknownError'
    rateLimit = rateLimit
  }
  
  return if (facebookError.code === undefined || facebookError.code === 102) {
    title = "Unauthenticated"
    detail = detail
    code = 'Unauthenticated'
    rateLimit = rateLimit
  }

  return if (facebookError.code === 190) {
    title = "Unauthorized"
    detail = detail
    code = 'Unauthorized'
    rateLimit = rateLimit
  }

  return if (facebookError.code === 506) {
    title = "Unprocessable entity"
    detail = detail
    code = 'UnprocessableEntity'
    rateLimit = rateLimit
  }

  return if (facebookError.code === 3 || facebookError.code === 10 || (facebookError.code >= 200 && facebookError.code <= 299) || facebookError.code ===  368) {
    title = "Unauthorized"
    detail = detail
    code = 'Unauthorized'
    rateLimit = rateLimit
  }

  return if (facebookError.code === 1 || facebookError.code === 2) {
    title = "Service unavailable"
    detail = detail
    code = 'ServiceUnavailable'
    rateLimit = rateLimit
  }

  return if (facebookError.code === 4 || facebookError.code === 17 || facebookError.code === 341) {
    title = "Rate limit reached"
    detail = detail
    code = 'RateLimitReached'
    rateLimit = rateLimit
  }

  return {
    title = "Unknown error"
    detail = (`Unknown error occurred. Status: ${statusCode}. Facebook error type, code, subcode:  ${facebookError.type}, ${facebookError.code}, ${facebookError.error_subcode}`)
    code = 'UnknownError'
    rateLimit = rateLimit
  }
}
