profile = "social-media/publishing-profiles@1.0"
provider = "facebook"

"""
Get Facebook Pages for publishing
https://developers.facebook.com/docs/graph-api/reference/user/accounts/
https://developers.facebook.com/docs/graph-api/reference/page/
"""
map GetProfilesForPublishing {
  apiVersion = 'v12.0'

  http GET "/{apiVersion}/me/accounts" {
    request {
      query {
        access_token = parameters.accessToken
        fields = "id,name,can_post,link,username,picture{url}"
      }
    }

    response 200 "application/json" {
      pages = call foreach(page of body.data) MapPage(page = page)

      return map result {
        profiles = pages
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response {
      error = call MapFacebookError(statusCode = statusCode, error = body, headers = headers)
      map error error
    }

  }
}

operation MapPage {
  page = args.page

  // TODO: Handle can_post

  return {
    id = page.id
    name = page.name
    username = page.username
    imageUrl = page.picture.data.url
  }
}

//Facebook rate limits: https://developers.facebook.com/docs/graph-api/overview/rate-limiting
operation MapRateLimit {
  appUsageHeader = args.headers['x-app-usage']
  appUsageHeaderParsed = undefined

  set if (appUsageHeader) {
    appUsageHeaderParsed = JSON.parse(appUsageHeader)
  }

  remainingRequestsPercentage = undefined

  set if(appUsageHeaderParsed && appUsageHeaderParsed.call_count && parseInt(appUsageHeaderParsed.call_count, 10) !== 'NaN') {
    remainingRequestsPercentage = 100 - parseInt(appUsageHeaderParsed.call_count, 10)
  }

  // TODO: add CPU time and time rate limit values to th outcome (remainingCPUTimePrecentage and remainingTimePercentage)

  return {
    bucket = 'Facebook' //Facebook uses generic rate limits for me/accounts endpoint
    remainingRequestsPercentage = remainingRequestsPercentage
  }
}

operation MapFacebookError {
  statusCode = args.statusCode
  facebookError = args.error
  headers = args.headers

  rateLimit =  call MapRateLimit(headers = headers)

  detail = facebookError.error.message

  return if (statusCode === 400) {
    title = "Bad request"
    detail = detail
    code = 'BadRequest'
    rateLimit = rateLimit
  }

  return if (statusCode === 401) {
    title = "Unauthenticated"
    detail = detail
    code = 'Unauthenticated'
    rateLimit = rateLimit
  }

  return if (statusCode === 403) {
    title = "Unauthorized"
    detail = detail
    code = 'Unauthorized'
    rateLimit = rateLimit
  }

  return if (statusCode === 404) {
    title = "Not found"
    detail = detail
    code = 'NotFound'
    rateLimit = rateLimit
  }

  return if (statusCode === 429) {
    title = "Rate limit exceeded"
    detail = `You reached Facebook API max requests quota.`
    code = 'RateLimitReached'
    rateLimit = rateLimit
  }

  return {
    title = "Unknown error"
    detail = (`Unknown error occurred. Status: ${statusCode}`)
    code = 'UnknownError'
    rateLimit = rateLimit
  }
}

