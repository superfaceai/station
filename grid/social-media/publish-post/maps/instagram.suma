// Instagram Graph API Reference: https://developers.facebook.com/docs/instagram-api

profile = "social-media/publish-post@2.0"
provider = "instagram"

map PublishPost {
  apiVersion = 'v14.0'
  businessAccountId = input.profileId
  authorizationHeaderValue = 'Bearer ' + parameters.accessToken
  text = input.text

  media = input.media || []
  videos = input.videos || []

  return map error if((media.length === 0 || !media[0].url) && videos.length === 0) { 
    title = "Media url required"
    detail = "You must provide one media with URL for Instagram provider"
  }

  return map error if(media.length > 10) {
    title = "Too many media items"
    detail = "Only up to 10 media items can be published with Instagram provider"
  }

  isCarousel = false
  set if (media.length > 1) {
    isCarousel = true
  }

  // Upload all media regardless whether it's in carousel or not
  mediaIds = []
  call foreach(item of media) UploadMedia(businessAccountId = businessAccountId, item = item, isCarousel = isCarousel, caption = text, authorization = authorizationHeaderValue) {
    return map error if (outcome.error) outcome.error
    mediaIds = [...mediaIds, outcome.data]
  }

  mediaIds = [...mediaIds, ...videos]

  // +1 request if this is a carousel
  // https://developers.facebook.com/docs/instagram-api/guides/content-publishing#carousel-posts
  containerId = call UploadMedia(businessAccountId = businessAccountId, children = mediaIds, caption = text, authorization = authorizationHeaderValue) if (isCarousel)
  // Otherwise just pick the first uploaded item
  set if (!isCarousel) {
    containerId = mediaIds[0]
  }

  http POST "/{apiVersion}/{businessAccountId}/media_publish" {
    request {
      query {
        creation_id = containerId
      }

      headers {
        "authorization" = authorizationHeaderValue
      }
    }

    response 200 "application/json" {
      postId = body.id
    }

    response {
      error = call MapApiError(statusCode = statusCode, body = body, headers = headers)
      return map error error
    }
  }

  // 3rd request because there doesn't seem to be another way to read-on-create the permalink or ig_id fields, or to convert Graph API ID to a working URL
  http GET "/{apiVersion}/{postId}" {
    request {
      query {
        fields = "permalink"
      }

      headers {
        "authorization" = authorizationHeaderValue
      }
    }

    response 200 "application/json" {
      map result {
        postId = postId
        url = body.permalink
      }
    }

    response {
      error = call MapApiError(statusCode = statusCode, body = body, headers = headers)
      return map error error
    }
  }
}

// https://developers.facebook.com/docs/instagram-api/reference/error-codes/
operation MapApiError {
  statusCode = args.statusCode
  headers = args.headers
  body = args.body

  errorCode = body.error.code
  subcode = body.error.error_subcode
  title = body.error.error_user_title || body.error.type || body.error.message || 'Unknown error'
  detail = body.error.error_user_msg || body.error.message || undefined
  // FIXME: Code handling
  return {
    title = title
    detail = detail
    original = body.error || body
  }
}

operation UploadMedia {
  apiVersion = 'v14.0'
  businessAccountId = args.businessAccountId
  itemUrl = args.item ? args.item.url : undefined
  isCarousel = args.isCarousel || undefined
  children = args.children ? JSON.stringify(args.children) : undefined
  caption = isCarousel ? undefined : args.caption // captions are not supported for carousel items
  mediaType = children ? 'CAROUSEL' : undefined
  authorizationHeaderValue = args.authorization

  http POST "/{apiVersion}/{businessAccountId}/media" {
    request {
      query {
        image_url = itemUrl,
        caption = caption,
        is_carousel_item = isCarousel,
        media_type = mediaType,
        children = children,
      }

      headers {
        authorization = authorizationHeaderValue
      }
    }

    response 200 "application/json" {
      return body.id
    }

    response {
      error = call MapApiError(statusCode = statusCode, body = body, headers = headers)
      fail error
    }
  }
}
