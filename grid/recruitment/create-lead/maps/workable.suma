profile = "recruitment/create-lead@2.0"
provider = "workable"

map CreateLead {
  cv = input.cv

  return map error if (!input.jobId) {
    title = "Missing required field"
    detail = "Field jobId is required. Please provide it in input."
    code = "JobNotFound"
  }

  call CheckSubdomainExists(
    clientId = parameters.CLIENT_ID,
    subdomain = parameters.SUBDOMAIN
  ) {
    return map error if (outcome.error) outcome.error
  }
  
  call CheckJobExists(
    clientId = parameters.CLIENT_ID,
    jobId = input.jobId
  ) {
    return map error if (outcome.error) outcome.error
  }

  call CheckSupportedFileTypes(cv = cv) {
    return map error if (outcome.error) outcome.error
  }

  set if(cv && cv.data) {
    resumeDataBuffer = cv.data.getAllData()
  }

  set if(resumeDataBuffer) {
    resume = {
      name: cv.fileName,
      data: resumeDataBuffer.toString('base64')
    }
  }

  call CreateLead (
    clientId = parameters.CLIENT_ID,
    lead = input,
    leadResume = resume
  ) {
    return map error if (outcome.error) outcome.error

    createLeadOutcome = outcome.data
  }

  return map result {
    id = createLeadOutcome.id
    jobId = createLeadOutcome.jobId
    rateLimit = createLeadOutcome.rateLimit
  }
}

map CreateLeadFeatures {
  map result {
    cvMIMETypes = ['application/pdf', 'text/rtf', 'application/msword', 'application/vnd.openxmlformats-officedocument.custom-properties+xml']
    cvUploadMethods = ['url', 'file']
  }
}

// Workable rate limits docs: https://workable.readme.io/reference/rate-limits
operation MapRateLimit {
  totalRequests = parseInt(args.headers['x-rate-limit-limit'], 10)
  remainingRequests = parseInt(args.headers['x-rate-limit-remaining'], 10)
  remainingRequestsPercentage = undefined
  resetTimestamp = parseInt(args.headers['x-rate-limit-reset'], 10)

  set if(isNaN(totalRequests)) {
    totalRequests = undefined
  }

  set if(isNaN(remainingRequests)) {
    remainingRequests = undefined
  }

  set if(totalRequests > 0 && remainingRequests !== undefined) {
    remainingRequestsPercentage = remainingRequests / totalRequests * 100
  }

  set if(isNaN(resetTimestamp, 10)) {
    resetTimestamp = undefined
  }

  return {
    bucket = 'workable'
    totalRequests = totalRequests
    remainingRequests = remainingRequests
    remainingRequestsPercentage = remainingRequestsPercentage
    resetTimestamp = resetTimestamp
  }
}

operation MapWorkableError {
  statusCode = args.statusCode
  workableError = args.error

  rateLimit = call MapRateLimit(headers = args.headers)

  return if (statusCode === 400) {
    title = 'Bad request'
    detail = workableError
    code = 'BadRequest'
    rateLimit = rateLimit
  }

  return if (statusCode === 401) {
    title = 'Unauthenticated'
    detail = workableError
    code = 'Unauthenticated'
    rateLimit = rateLimit
  }

  return if (statusCode === 403) {
    title = 'Unauthorized'
    detail = workableError
    code = 'Unauthorized'
    rateLimit = rateLimit
  }

  return if (statusCode === 404) {
    title = 'Not found'
    detail = workableError
    code = 'NotFound'
    rateLimit = rateLimit
  }

  return if (statusCode === 422) {
    title = 'Conflict'
    detail = workableError 
    code = 'Conflict'
    rateLimit = rateLimit
  }

  return if (statusCode === 429) {
    title = 'Rate limit exceeded'
    detail = 'You reached max requests quota.'
    code = 'RateLimitReached'
    rateLimit = rateLimit
  }

  return {
    title = "Unknown error"
    detail = workableError
    code = 'UnknownError'
    rateLimit = rateLimit
  }
}

operation CreateLead {
  http POST "/spi/v3/jobs/{ args.lead.jobId }/candidates" {
    security "bearer_token"

    request {
      query {
        stage = 'sourced'
      }

      headers {
        'X-WORKABLE-CLIENT-ID' = args.clientId
      }

      body {
        firstname = args.lead.firstName
        lastname = args.lead.lastName

        email = args.lead.email
        address = args.lead.address
        phone = args.lead.phone

        education_entries = args.lead.education ? args.lead.education.map(edu => ({
          school: edu.school,
          degree: edu.degree,
          field_of_study: edu.fieldOfStudy,
          start_date: edu.startedAt,
          end_date: edu.endedAt,
        })) : undefined
        
        experience_entries = args.lead.workExperience ? args.lead.workExperience.map(work => ({
          title: work.position,
          summary: work.summary,
          company: work.company,
          industry: work.industry,
          current: work.current,
          start_date: work.startedAt,
          end_date: work.endedAt,
        })) : undefined
        
        social_profiles = args.lead.links ? args.lead.links.map(link => ({
          type: link.name,
          url: link.url
        })) : undefined

        resumeUrl = args.lead.cv ? args.lead.cv.url ? args.lead.cv.url : undefined : undefined
        resume = args.leadResume

        domain = Array.isArray(args.lead.source) ? args.lead.source.join(', ') : input.source
      }
    }

    response 201 "application/json" {
      return {
        id = body.candidate.id
        jobId = body.candidate.job.shortcode
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response "application/json" {
      error = call MapWorkableError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )
      
      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}

operation CheckSubdomainExists {
  http GET "/spi/v3/accounts/{ args.subdomain }" {
    security "bearer_token"

    request {
      headers {
        'X-WORKABLE-CLIENT-ID' = args.clientId
      }
    }

    response 200 {       
      return {}
    }

    response 422 "application/json" {
      fail {
        title = 'Wrong Integration Parameter'
        detail = 'Subdomain ' + args.subdomain + ' does not exist.'
        code = 'WrongIntegrationParameter'
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response "application/json" {
      error = call MapWorkableError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )

      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}

operation CheckJobExists {
  http GET "/spi/v3/jobs/{ args.jobId }" {
    security "bearer_token"

    request {
      headers {
        'X-WORKABLE-CLIENT-ID' = args.clientId
      }
    }

    response 200 {       
      return {}
    }

    response 404 "application/json" {
      fail {
        title = 'Job Not Found'
        detail = 'Unable to get job by ID ' + args.jobId + '. Check that the job exists.'
        code = 'JobNotFound'
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response "application/json" {
      error = call MapWorkableError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )

      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}

operation CheckSupportedFileTypes {
  cv = args.cv || {}

  return if(cv.data === undefined || cv.data === null) {}

  fail if(cv.fileName === undefined || cv.fileName === null) {
    title = "Missing CV file name"
    detail = "CV file name is required."
    code = "CVFileNameRequired"
  }
  
  // https://workable.readme.io/reference/job-candidates-create#how-can-i-post-the-candidates-resume-along-with-the-candidate-information
  fail if(
      !cv.fileName.endsWith('pdf') &&
      !cv.fileName.endsWith('rtf') &&
      !cv.fileName.endsWith('doc') &&
      !cv.fileName.endsWith('docx')) {
    title = "CV MIME type not supported"
    detail = `File type ${cv.fileName} is not supported by Workable provider.`
    code = "CVMIMETypeNotSupported"
  }

  return {}
}
