profile = "recruitment/candidates@1.0"
provider = "breezy-hr"

map CreateCandidate {
  // TODO: transform array to object
  // links = input.links.map(link => {
  //   if (link.name === 'linkedin') {
  //     return { linkedin: link.url }
  //   }
     
  //   if (link.name === 'twitter') { 
  //     return { twitter: link.url }
  //   }
  // })

  http POST "/v3/company/{ parameters.COMPANY_ID }/position/{ input.jobId }/candidates" {
    request {
      headers {
        Authorization = parameters.ACCESS_TOKEN
      }

      body {
        name = input.firstName + ' ' + input.lastName
        
        email_address = input.email
        address = input.address
        phone_number = input.phone
        
        education = input.education ? input.education.map(edu => ({
          school_name: edu.school,
          degree: edu.degree,
          field_of_study: edu.fieldOfStudy,
          start_date: edu.startedAt,
          end_date: edu.endedAt,
        })) : undefined
        
        work_history = input.workExperience ? input.workExperience.map(work => ({
          title: work.position,
          summary: work.summary,
          company_name: work.company,
          industry: work.industry,
          is_current: work.current,

        })) : undefined
        
        // social_profiles = input.links ? { ...links }: undefined
        
        origin = 'applied'
      }
    }

    response 200 "application/json" {
      map result {
        id = body.candidate.id
        jobId = input.jobId
      }
    }

    response "application/json" {
      error = call MapBreezyHRError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )

      map error error
    }

    response {
      map error {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}

// Breezy HR rate limits docs: https://developer.breezy.hr/reference/rate-limiting
operation MapRateLimit {
  totalRequests = parseInt(args.headers['x-ratelimit-limit'], 10)
  remainingRequests = parseInt(args.headers['x-ratelimit-remaining'], 10)
  remainingRequestsPercentage = undefined
  resetTimestamp = parseInt(args.headers['x-ratelimit-reset'], 10)

  set if(isNaN(totalRequests)) {
    totalRequests = undefined
  }

  set if(isNaN(remainingRequests)) {
    remainingRequests = undefined
  }

  set if(totalRequests > 0 && remainingRequests !== undefined) {
    remainingRequestsPercentage = remainingRequests / totalRequests * 100
  }

  set if(isNaN(resetTimestamp, 10)) {
    resetTimestamp = undefined
  }

  return {
    bucket = 'breezy-hr'
    totalRequests = totalRequests
    remainingRequests = remainingRequests
    remainingRequestsPercentage = remainingRequestsPercentage
    resetTimestamp = resetTimestamp
  }
}

operation MapBreezyHRError {
  statusCode = args.statusCode
  workableError = args.error

  rateLimit = call MapRateLimit(headers = args.headers)

  return if (statusCode === 400) {
    title = 'Bad request'
    detail = workableError
    code = 'BadRequest'
    rateLimit = rateLimit
  }

  return if (statusCode === 401) {
    title = 'Unauthenticated'
    detail = workableError
    code = 'Unauthenticated'
    rateLimit = rateLimit
  }

  return if (statusCode === 403) {
    title = 'Unauthorized'
    detail = workableError
    code = 'Unauthorized'
    rateLimit = rateLimit
  }

  return if (statusCode === 404) {
    title = 'Not found'
    detail = workableError
    code = 'NotFound'
    rateLimit = rateLimit
  }

  return if (statusCode === 429) {
    title = 'Rate limit exceeded'
    detail = 'You reached max requests quota.'
    code = 'RateLimitReached'
    rateLimit = rateLimit
  }

  return {
    title = "Unknown error"
    detail = workableError
    code = 'UnknownError'
    rateLimit = rateLimit
  }
}
