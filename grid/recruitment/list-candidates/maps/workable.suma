profile = "recruitment/list-candidates@1.0"
provider = "workable"

map ListCandidates {
  call CheckSubdomainExists(
    clientId = parameters.CLIENT_ID,
    subdomain = parameters.SUBDOMAIN
  ) {
    return map error if (outcome.error) outcome.error
  }

  call ListCandidates (
    clientId = parameters.CLIENT_ID,
    subdomain = parameters.SUBDOMAIN,
    page = input.page,
    limit = input.limit,
    jobId = input.jobId
  ) { 
    return map error if (outcome.error) outcome.error

    listJobsOutcome = outcome.data
  }

  return map result {
    candidates = listJobsOutcome.candidates
    pagination = listJobsOutcome.pagination
    rateLimit = listJobsOutcome.rateLimit
  }
}

operation MapPagination {
  sinceIdToken = 'since_id='
  nextPageCursor = undefined

  nextUrl = args.workablePagination.next || ''
  sinceIdIndex = nextUrl.indexOf(sinceIdToken)

  set if(sinceIdIndex !== -1) {
    nextPageCursor = nextUrl.substring(sinceIdIndex + sinceIdToken.length, nextUrl.length).split('&')[0]
  }

  return {
    nextPage =  nextPageCursor
  }
}

// Workable rate limits docs: https://workable.readme.io/reference/rate-limits
operation MapRateLimit {
  totalRequests = parseInt(args.headers['x-rate-limit-limit'], 10)
  remainingRequests = parseInt(args.headers['x-rate-limit-remaining'], 10)
  remainingRequestsPercentage = undefined
  resetTimestamp = parseInt(args.headers['x-rate-limit-reset'], 10)

  set if(isNaN(totalRequests)) {
    totalRequests = undefined
  }

  set if(isNaN(remainingRequests)) {
    remainingRequests = undefined
  }

  set if(totalRequests > 0 && remainingRequests !== undefined) {
    remainingRequestsPercentage = remainingRequests / totalRequests * 100
  }

  set if(isNaN(resetTimestamp, 10)) {
    resetTimestamp = undefined
  }

  return {
    bucket = 'workable'
    totalRequests = totalRequests
    remainingRequests = remainingRequests
    remainingRequestsPercentage = remainingRequestsPercentage
    resetTimestamp = resetTimestamp
  }
}

operation MapWorkableError {
  statusCode = args.statusCode
  workableError = args.error

  rateLimit = call MapRateLimit(headers = args.headers)

  return if (statusCode === 400) {
    title = 'Bad request'
    detail = workableError
    code = 'BadRequest'
    rateLimit = rateLimit
  }

  return if (statusCode === 401) {
    title = 'Unauthenticated'
    detail = workableError
    code = 'Unauthenticated'
    rateLimit = rateLimit
  }

  return if (statusCode === 403) {
    title = 'Unauthorized'
    detail = workableError
    code = 'Unauthorized'
    rateLimit = rateLimit
  }

  return if (statusCode === 404) {
    title = 'Not found'
    detail = workableError
    code = 'NotFound'
    rateLimit = rateLimit
  }

  return if (statusCode === 422) {
    title = 'Conflict'
    detail = workableError 
    code = 'Conflict'
    rateLimit = rateLimit
  }

  return if (statusCode === 429) {
    title = 'Rate limit exceeded'
    detail = 'You reached max requests quota.'
    code = 'RateLimitReached'
    rateLimit = rateLimit
  }

  return {
    title = "Unknown error"
    detail = workableError
    code = 'UnknownError'
    rateLimit = rateLimit
  }
}

operation ListCandidates {
  http GET "/spi/v3/candidates" {
    security "bearer_token"

    request {
      query {
        shortcode = args.jobId
        limit = args.limit
        since_id = args.page
        include_fields = 'requirements,description,benefits'
      }

      headers {
        'X-WORKABLE-CLIENT-ID' = args.clientId
      }
    }

    response 200 "application/json" {
      candidates = body.candidates.map(candidate => {
        const name = candidate.name;
        if (!name) {
          if (candidate.firstname & candidate.lastname) {
            name = `${candidate.firstname} ${candidate.lastname}`
          } else {
            name = candidate.lastname || candidate.firstname
          }
        }
        return {
          id: candidate.id,
          jobId: candidate.job.shortcode,
          name: name,
          email: candidate.email
        }
      })

      return {
        candidates = candidates
        pagination = call MapPagination(workablePagination = body.paging || {})
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response "application/json" {
      error = call MapWorkableError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )

      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}

operation CheckSubdomainExists {
  http GET "/spi/v3/accounts/{ args.subdomain }" {
    security "bearer_token"

    request {
      headers {
        'X-WORKABLE-CLIENT-ID' = args.clientId
      }
    }

    response 200 {       
      return {}
    }

    response 422 "application/json" {
      fail {
        title = 'Not Found'
        detail = 'Unable to get subdomain by name ' + args.subdomain + '. Check that the subdomain with that name exists.'
        code = 'NotFound'
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response "application/json" {
      error = call MapWorkableError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )

      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}
