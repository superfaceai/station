profile = "recruitment/list-candidates@1.0"
provider = "breezy-hr"

map ListCandidates { 
   call CheckCompanyExists (
    accessToken = parameters.ACCESS_TOKEN,
    companyId = parameters.COMPANY_ID,
  ) { 
    return map error if (outcome.error) outcome.error
  }

  call CheckJobExists (
    accessToken = parameters.ACCESS_TOKEN,
    companyId = parameters.COMPANY_ID,
    jobId = input.jobId
  ) { 
    return map error if (outcome.error) outcome.error
  }
  
  http GET "/v3/company/{ parameters.COMPANY_ID }/position/{ input.jobId }/candidates" {
    request {
      query {
        page_size = input.limit
        page = input.page
      }
      headers {
        Authorization = parameters.ACCESS_TOKEN
      }
    }

    response 200 "application/json" {
      candidates = body.map(candidate => {
        return {
          id: candidate._id,
          jobId: input.jobId,
          name: candidate.name,
          email: candidate.email_address,
          phone: candidate.phone_number,
          createdAt: candidate.creation_date,
          updatedAt: candidate.updated_date,
        }
      })

      map result {
        candidates = candidates
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response "application/json" {
      error = call MapBreezyHRError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )
      
      return map error error
    }

    response {
      return map error {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}

operation MapBreezyHRError {
  statusCode = args.statusCode
  breezyHrError = args.error

  rateLimit = call MapRateLimit(headers = args.headers)

  return if (statusCode === 400) {
    title = 'Bad request'
    detail = breezyHrError
    code = 'BadRequest'
    rateLimit = rateLimit
  }

  return if (statusCode === 401) {
    title = 'Unauthenticated'
    detail = breezyHrError
    code = 'Unauthenticated'
    rateLimit = rateLimit
  }

  return if (statusCode === 403) {
    title = 'Unauthorized'
    detail = breezyHrError
    code = 'Unauthorized'
    rateLimit = rateLimit
  }

  return if (statusCode === 404) {
    title = 'Not found'
    detail = breezyHrError
    code = 'NotFound'
    rateLimit = rateLimit
  }

  return if (statusCode === 429) {
    title = 'Rate limit exceeded'
    detail = 'You reached max requests quota.'
    code = 'RateLimitReached'
    rateLimit = rateLimit
  }

  return {
    title = "Unknown error"
    detail = breezyHrError
    code = 'UnknownError'
    rateLimit = rateLimit
  }
}

//Breezy HR rate limits docs: https://developer.breezy.hr/reference/rate-limiting
operation MapRateLimit {
  totalRequests = parseInt(args.headers['x-ratelimit-limit'], 10)
  remainingRequests = parseInt(args.headers['x-ratelimit-remaining'], 10)
  remainingRequestsPercentage = undefined
  resetTimestamp = parseInt(args.headers['x-ratelimit-reset'], 10)

  set if(isNaN(totalRequests)) {
    totalRequests = undefined
  }

  set if(isNaN(remainingRequests)) {
    remainingRequests = undefined
  }

  set if(totalRequests > 0 && remainingRequests !== undefined) {
    remainingRequestsPercentage = remainingRequests / totalRequests * 100
  }

  set if(isNaN(resetTimestamp, 10)) {
    resetTimestamp = undefined
  }

  return {
    bucket = 'breezy-hr'
    totalRequests = totalRequests
    remainingRequests = remainingRequests
    remainingRequestsPercentage = remainingRequestsPercentage
    resetTimestamp = resetTimestamp
  }
}

operation CheckJobExists {
  http GET "/v3/company/{ args.companyId }/position/{ args.jobId }" {

    request {
      headers {
        Authorization = args.accessToken
      }
    }

    response 200 {       
      return {}
    }

    response 500 "application/json" {
      // Breezy HR returns http status code 500 in case that the job ID doesn't exist. It could be caused by other reasons as well, but at least the error helps the client understand the error better.
      fail {
        title = 'Not Found'
        detail = 'Unable to get job by ID ' + args.jobId + '. Check that the job with that ID exists.'
        code = 'NotFound'
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response "application/json" {
      error = call MapBreezyHRError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )

      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}

operation CheckCompanyExists {
  http GET "/v3/company/{ args.companyId }" {

    request {
      headers {
        Authorization = args.accessToken
      }
    }

    response 200 {       
      return {}
    }

    response 500 "application/json" {
      fail {
        title = 'Not Found'
        detail = 'Unable to get company by ID ' + args.companyId + '. Check that the company with that ID exists.'
        code = 'NotFound'
        rateLimit = call MapRateLimit(headers = headers)
      }
    }

    response "application/json" {
      error = call MapBreezyHRError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )

      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}
