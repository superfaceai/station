profile = "recruitment/create-candidate@1.0"
provider = "breezy-hr"

map CreateCandidate {

  call CheckCandidateByEmail (
    accessToken = parameters.ACCESS_TOKEN,
    companyId = parameters.COMPANY_ID,
    candidate = input
  ) {
    return map error if (outcome.error) outcome.error
  }

  call CreateCandidate (
    accessToken = parameters.ACCESS_TOKEN,
    companyId = parameters.COMPANY_ID,
    candidate = input,
  ) {
    return map error if (outcome.error) outcome.error

    createCandidateOutcome = outcome.data
  }

  return map result {
    id = createCandidateOutcome.candidate.id
    jobId = createCandidateOutcome.candidate.jobId
    rateLimit = createCandidateOutcome.rateLimit
  }
}

// Breezy HR rate limits docs: https://developer.breezy.hr/reference/rate-limiting
operation MapRateLimit {
  totalRequests = parseInt(args.headers['x-ratelimit-limit'], 10)
  remainingRequests = parseInt(args.headers['x-ratelimit-remaining'], 10)
  remainingRequestsPercentage = undefined
  resetTimestamp = parseInt(args.headers['x-ratelimit-reset'], 10)

  set if(isNaN(totalRequests)) {
    totalRequests = undefined
  }

  set if(isNaN(remainingRequests)) {
    remainingRequests = undefined
  }

  set if(totalRequests > 0 && remainingRequests !== undefined) {
    remainingRequestsPercentage = remainingRequests / totalRequests * 100
  }

  set if(isNaN(resetTimestamp, 10)) {
    resetTimestamp = undefined
  }

  return {
    bucket = 'breezy-hr'
    totalRequests = totalRequests
    remainingRequests = remainingRequests
    remainingRequestsPercentage = remainingRequestsPercentage
    resetTimestamp = resetTimestamp
  }
}

operation MapBreezyHRError {
  statusCode = args.statusCode
  workableError = args.error

  rateLimit = call MapRateLimit(headers = args.headers)

  return if (statusCode === 400) {
    title = 'Bad request'
    detail = workableError
    code = 'BadRequest'
    rateLimit = rateLimit
  }

  return if (statusCode === 401) {
    title = 'Unauthenticated'
    detail = workableError
    code = 'Unauthenticated'
    rateLimit = rateLimit
  }

  return if (statusCode === 403) {
    title = 'Unauthorized'
    detail = workableError
    code = 'Unauthorized'
    rateLimit = rateLimit
  }

  return if (statusCode === 404) {
    title = 'Not found'
    detail = workableError
    code = 'NotFound'
    rateLimit = rateLimit
  }

  return if (statusCode === 429) {
    title = 'Rate limit exceeded'
    detail = 'You reached max requests quota.'
    code = 'RateLimitReached'
    rateLimit = rateLimit
  }

  return {
    title = "Unknown error"
    detail = workableError
    code = 'UnknownError'
    rateLimit = rateLimit
  }
}

operation CreateCandidate {
  supportedSocialProfiles = [
    'facebook', 'linkedin', 'twitter', 'dribbble', 'instagram', 'behance', 
    'angellist', 'flickr', 'github', 'youtube', 'google-plus', 'skype', 'globe'
  ]

  links = {}
  customAttributes = []

  candidate = args.candidate

  tmp = (candidate.links || []).forEach(link => {
    if (supportedSocialProfiles.includes(link.name)) {
      links[link.name] = link.url
    } else {
      customAttributes.push({ 
        name: link.name, 
        value: link.url
      })
    }
  })

  http POST "/v3/company/{ parameters.COMPANY_ID }/position/{ candidate.jobId }/candidates" {
    request "application/json" {
      headers {
        Authorization = parameters.ACCESS_TOKEN
      }

      body {
        name = candidate.firstName + ' ' + candidate.lastName
        
        email_address = candidate.email
        address = candidate.address
        phone_number = candidate.phone
        
        education = candidate.education ? candidate.education.map(edu => ({
          school_name: edu.school,
          degree: edu.degree,
          field_of_study: edu.fieldOfStudy,
          start_date: edu.startedAt,
          end_date: edu.endedAt,
        })) : undefined
        
        work_history = candidate.workExperience ? candidate.workExperience.map(work => ({
          title: work.position,
          summary: work.summary,
          company_name: work.company,
          industry: work.industry,
          is_current: work.current,

        })) : undefined
        
        social_profiles = links
        custom_attributes = customAttributes
        
        origin = 'applied'
      }
    }

    response 200 "application/json" {
      return {
          candidate = {
            id: 'CANDIDATE:' + body._id,
            jobId: candidate.jobId
          },
          rateLimit = call MapRateLimit(headers = headers) 
        }
    }

    response "application/json" {
      error = call MapBreezyHRError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )

      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}

operation CheckCandidateByEmail {
  http GET "/v3/company/{ args.companyId }/candidates/search" {

  request {
      query {
        email_address = args.candidate.email
      }
      headers {
        Authorization = args.accessToken
      }
    }

    response 200 {
      appliedCandidates = body.filter(candidate => candidate.position._id === args.candidate.jobId )

      fail if(appliedCandidates.length > 0) {
        title = 'Conflict'
        detail = 'Candidate with email ' + args.candidate.email + ' already applied for the job.' 
        code = 'Conflict'
        rateLimit = call MapRateLimit(headers = headers)
      }

      return {}
    }

    response "application/json" {
      error = call MapBreezyHRError(
        statusCode = statusCode,
        error = body.error,
        headers = headers
      )

      fail error
    }

    response {
      fail {
        title = "Unknown error"
        detail = JSON.stringify(body, null, 2)
        code = 'UnknownError'
      }
    }
  }
}
