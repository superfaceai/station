profile = "gpt/generate-text@1.0"
provider = "openai"

map CompleteText { 
  http POST "/v1/completions" {
    security "bearer"
  
    request "application/json" {
      body {
        prompt = input.prompt
        model = call MapModelSize(model = input.model)
        temperature = call MapCreativity(creativity = input.creativity)
        max_tokens = call MapMaxLength(approxMaxWords = input.approxMaxWords)
        n = call MapCount(count = input.count)
        stream = false
        logprobs = null
      }
    }

    response 200 "application/json" {
      completions = call foreach(choice of body.choices) MapCompletion(
        choice = choice
      )

      map result {
        completions = completions
      }
    }

    response "application/json" {
      error = call HandleErrorWithJson(body = body, statusCode = statusCode)
      return map error error
    }

    response {
      error = call HandleError(body = body, statusCode = statusCode)
      return map error error
    }
  }
}

operation MapModelSize {
  MODELSIZE_TO_OPENAI_MODEL = {
    "small": "text-babbage-001",
    "medium": "text-curie-001",
    "large": "text-davinci-003"
  }

  DEFAULT_MODEL_SIZE = "large"

  return MODELSIZE_TO_OPENAI_MODEL[args.model || DEFAULT_MODEL_SIZE]
}

operation MapCreativity {
  DEFAULT_CREATIVITY = 1
  
  creativity = args.creativity || DEFAULT_CREATIVITY

  // Clamp `creativity` between 0 and 1
  return Math.min(Math.max(creativity, 0), 1)
}

operation MapMaxLength {
  // About tokens: https://beta.openai.com/tokenizer

  DEFAULT_MAX_WORDS = 12

  return parseInt((args.approxMaxWords || DEFAULT_MAX_WORDS) * 1.4)
}

operation MapCount {
  DEFAULT_COUNT = 1

  return parseInt(Math.max(1, args.count || DEFAULT_COUNT))
}

operation MapCompletion {
  return args.choice.text
}

operation HandleErrorWithJson {
  statusCode = args.statusCode
  body = args.body

  return if (statusCode === 400) {
    title = "Invalid data"
    detail = (`Invalid data was sent to OpenAI server: ${body.error.message}`)
  }

  return if (statusCode === 404) {
    title = "Not Found"
    detail = body.error.message
  }

  return {
    title = "Unknown error"
    detail = (`Unknown error occurred. Status: ${statusCode}`)
  }
}

operation HandleError {
  statusCode = args.statusCode
  body = args.body

  return if (statusCode === 401) {
    title = "Unauthenticated"
    detail = "Please make sure you're providing a valid OpenAI API key"
  }

  return if (statusCode === 403) {
    title = "Not allowed"
  }

  return if (statusCode === 429) {
    title = "Quota limit exceeded"
  }

  return if (statusCode === 500) {
    title = "Error on OpenAI's side"
    detail = (`It looks like OpenAI is temporarily having difficulties processing your request. Try again or contact OpenAI's support. ${String(body)}`)
  }

  return {
    title = "Unknown error"
    detail = (`Unknown error occurred. Status: ${statusCode}`)
  }
}