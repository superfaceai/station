profile = "chat/channels@1.0"
provider = "discord"

"""
GetChannels map
"""
map GetChannels {
  return map error if (input.workspace === undefined) {
    title = "Input parameter `workspace` is required for provider discord"
  }

  http GET "/guilds/{input.workspace}/channels" {
    request "application/json" {
      headers {
        "Authorization" = `Bot ${parameters.accessToken}`
      }
    }

    response 200 "application/json" {
      channels = call MapChannels(channels = body)
      rateLimit = call MapRateLimitDetails(headers = headers)

      map result {
        channels = channels
        rateLimit = rateLimit
      }
    }

    response {
      error = call MapDiscordError(
        statusCode = statusCode,
        error = body,
        headers = headers,
      )
      
      map error error
    }
  }
}

"""
Operation MapChannels
Returns array mapping channels in received body
"""
operation MapChannels {
  channels = args.channels.reduce((acc, channel) => {
    /**
     * Filter only relevant channels 
     * more about channel types here: https://discord.com/developers/docs/resources/channel#channel-object-channel-types
     */
    if ([0, 5].includes(channel.type)) {

      /**
       * Returns UNIX timestamp from specified discord snowflake id
       * More about snowflakes: https://discord.com/developers/docs/reference#snowflakes
       */
      const discordEpoch = 1420070400000;
      const getTimestamp = (snowflake) => Number(BigInt(snowflake) >> BigInt(22)) + discordEpoch;
      
      const resultChannel = {
        id: channel.id,
        createdAt: getTimestamp(channel.id),
      };

      if (channel.name) {
        resultChannel.name = channel.name;
      }

      if (channel.topic) {
        resultChannel.description = channel.topic;
      }

      if (channel.member_count) {
        resultChannel.membersCount = channel.member_count;
      }

      acc.push(resultChannel)
    }

    return acc;
  }, []);

  return channels
}

"""
Operation MapRateLimitDetails
Returns object mapping rate limit details specified in received headers
"""
operation MapRateLimitDetails {
  headers = args.headers
  details = {}

  bucket = headers['x-ratelimit-bucket']
  totalRequests = parseInt(headers['x-ratelimit-limit'])
  remainingRequests = parseInt(headers['x-ratelimit-remaining'])
  resetTimestamp = parseFloat(headers['x-ratelimit-reset'])
  resetAfter = parseInt(headers['x-ratelimit-reset-after'])
  retryAfter = parseInt(headers['Retry-After'])

  set if (bucket) {
    details.bucket = bucket
  }

  set if (!isNaN(totalRequests)) {
    details.totalRequests = totalRequests
  }

  set if (!isNaN(remainingRequests)) {
    details.remainingRequests = remainingRequests
  }

  set if (!isNaN(resetAfter)) {
    details.resetAfter = resetAfter
  }

  set if (!isNaN(resetTimestamp)) {
    details.resetTimestamp = resetTimestamp
  }

  set if (!isNaN(retryAfter)) {
    details.retryAfter = retryAfter
  }

  set if (details.remainingRequests && details.totalRequests) {
    details.remainingRequestsPercentage = (details.remainingRequests / details.totalRequests) * 100
  }

  set if (Object.keys(details).length === 0) {
    details = undefined
  }

  return details
}

"""
Operation Map Discord Error
Returns error object based on error body, statusCode and headers.
"""
operation MapDiscordError {
  statusCode = args.statusCode
  discordError = args.error
  headers = args.headers

  rateLimit = call MapRateLimitDetails(headers = headers)
  detail = discordError.message

  return if (statusCode === 400) {
    title = 'Bad request'
    detail = discordError
    rateLimit = rateLimit
  }

  return if (statusCode === 401) {
    title = 'Unauthorized'
    detail = detail
    rateLimit = rateLimit
  }

  return if (statusCode === 403) {
    title = 'Forbidden'
    detail = detail
    rateLimit = rateLimit
  }

  return if (statusCode === 404) {
    title = 'Not found'
    detail = detail
    rateLimit = rateLimit
  }

  return if (statusCode === 405) {
    title = 'Method not allowed'
    detail = detail
    rateLimit = rateLimit
  }

  return if (statusCode === 429) {
    title = 'Too Many Requests'
    detail = `${detail} Retry after ${discordError.retry_after} seconds`
    rateLimit = rateLimit
  }

  return if (statusCode === 502) {
    title = 'Bad gateway'
    detail = detail
    rateLimit = rateLimit
  }

  return {
    title = 'Unknown error'
    detail = `Unknown error occurred. Status: ${statusCode}. Message: ${detail}.`
    rateLimit = rateLimit
  }
}
