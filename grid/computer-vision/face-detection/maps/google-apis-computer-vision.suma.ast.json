{
  "kind": "MapDocument",
  "header": {
    "kind": "MapHeader",
    "profile": {
      "scope": "computer-vision",
      "name": "face-detection",
      "version": {
        "major": 1,
        "minor": 0,
        "patch": 0
      }
    },
    "provider": "google-apis-computer-vision",
    "location": {
      "start": {
        "line": 1,
        "column": 1,
        "charIndex": 0
      },
      "end": {
        "line": 2,
        "column": 41,
        "charIndex": 87
      }
    }
  },
  "definitions": [
    {
      "kind": "MapDefinition",
      "name": "FaceDetection",
      "usecaseName": "FaceDetection",
      "statements": [
        {
          "kind": "HttpCallStatement",
          "method": "POST",
          "url": "/v1/images:annotate",
          "request": {
            "kind": "HttpRequest",
            "headers": {
              "kind": "ObjectLiteral",
              "fields": [
                {
                  "kind": "Assignment",
                  "key": [
                    "Content-Type"
                  ],
                  "value": {
                    "kind": "PrimitiveLiteral",
                    "value": "application/json",
                    "location": {
                      "start": {
                        "line": 13,
                        "column": 28,
                        "charIndex": 261
                      },
                      "end": {
                        "line": 13,
                        "column": 46,
                        "charIndex": 279
                      }
                    }
                  },
                  "location": {
                    "start": {
                      "line": 13,
                      "column": 11,
                      "charIndex": 244
                    },
                    "end": {
                      "line": 13,
                      "column": 46,
                      "charIndex": 279
                    }
                  }
                }
              ],
              "location": {
                "start": {
                  "line": 12,
                  "column": 17,
                  "charIndex": 232
                },
                "end": {
                  "line": 14,
                  "column": 10,
                  "charIndex": 289
                }
              }
            },
            "body": {
              "kind": "ObjectLiteral",
              "fields": [
                {
                  "kind": "Assignment",
                  "key": [
                    "requests"
                  ],
                  "value": {
                    "kind": "JessieExpression",
                    "expression": "[{\n        features: [\n            {\n                maxResults: 1,\n                type: \"FACE_DETECTION\"\n            }\n        ],\n        image: {\n            source: {\n                imageUri: input.imageUrl\n            }\n        }\n    }]",
                    "source": "[{\n            features: [\n              {\n              maxResults: 1,\n              type: \"FACE_DETECTION\"\n              }\n            ],\n            image: {\n              source: {\n              imageUri: input.imageUrl\n              }\n            }\n          }]",
                    "sourceMap": "AAAA,IAAI,aAAa,GAAG,CAAC;QACT,QAAQ,EAAE;YACR;gBACA,UAAU,EAAE,CAAC;gBACb,IAAI,EAAE,gBAAgB;aACrB;SACF;QACD,KAAK,EAAE;YACL,MAAM,EAAE;gBACR,QAAQ,EAAE,KAAK,CAAC,QAAQ;aACvB;SACF;KACF,CAAC,CAAC",
                    "location": {
                      "start": {
                        "line": 16,
                        "column": 22,
                        "charIndex": 326
                      },
                      "end": {
                        "line": 28,
                        "column": 13,
                        "charIndex": 592
                      }
                    }
                  },
                  "location": {
                    "start": {
                      "line": 16,
                      "column": 11,
                      "charIndex": 315
                    },
                    "end": {
                      "line": 28,
                      "column": 13,
                      "charIndex": 592
                    }
                  }
                }
              ],
              "location": {
                "start": {
                  "line": 15,
                  "column": 14,
                  "charIndex": 303
                },
                "end": {
                  "line": 29,
                  "column": 10,
                  "charIndex": 602
                }
              }
            },
            "location": {
              "start": {
                "line": 9,
                "column": 5,
                "charIndex": 175
              },
              "end": {
                "line": 30,
                "column": 6,
                "charIndex": 608
              }
            },
            "security": [
              {
                "id": "google-api-key"
              }
            ]
          },
          "responseHandlers": [
            {
              "kind": "HttpResponseHandler",
              "statements": [
                {
                  "kind": "OutcomeStatement",
                  "isError": true,
                  "terminateFlow": true,
                  "condition": {
                    "kind": "ConditionAtom",
                    "expression": {
                      "kind": "JessieExpression",
                      "expression": "body.responses.length === 1 && body.responses[0].error",
                      "source": "body.responses.length === 1 && body.responses[0].error",
                      "sourceMap": "AAAA,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC",
                      "location": {
                        "start": {
                          "line": 33,
                          "column": 28,
                          "charIndex": 652
                        },
                        "end": {
                          "line": 33,
                          "column": 82,
                          "charIndex": 706
                        }
                      }
                    },
                    "location": {
                      "start": {
                        "line": 33,
                        "column": 24,
                        "charIndex": 648
                      },
                      "end": {
                        "line": 33,
                        "column": 83,
                        "charIndex": 707
                      }
                    }
                  },
                  "value": {
                    "kind": "ObjectLiteral",
                    "fields": [
                      {
                        "kind": "Assignment",
                        "key": [
                          "code"
                        ],
                        "value": {
                          "kind": "JessieExpression",
                          "expression": "body.responses[0].error.code",
                          "source": "body.responses[0].error.code",
                          "sourceMap": "AAAA,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC",
                          "location": {
                            "start": {
                              "line": 34,
                              "column": 16,
                              "charIndex": 725
                            },
                            "end": {
                              "line": 34,
                              "column": 44,
                              "charIndex": 753
                            }
                          }
                        },
                        "location": {
                          "start": {
                            "line": 34,
                            "column": 9,
                            "charIndex": 718
                          },
                          "end": {
                            "line": 34,
                            "column": 44,
                            "charIndex": 753
                          }
                        }
                      },
                      {
                        "kind": "Assignment",
                        "key": [
                          "message"
                        ],
                        "value": {
                          "kind": "JessieExpression",
                          "expression": "body.responses[0].error.message",
                          "source": "body.responses[0].error.message",
                          "sourceMap": "AAAA,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC",
                          "location": {
                            "start": {
                              "line": 35,
                              "column": 19,
                              "charIndex": 772
                            },
                            "end": {
                              "line": 35,
                              "column": 50,
                              "charIndex": 803
                            }
                          }
                        },
                        "location": {
                          "start": {
                            "line": 35,
                            "column": 9,
                            "charIndex": 762
                          },
                          "end": {
                            "line": 35,
                            "column": 50,
                            "charIndex": 803
                          }
                        }
                      }
                    ],
                    "location": {
                      "start": {
                        "line": 33,
                        "column": 84,
                        "charIndex": 708
                      },
                      "end": {
                        "line": 36,
                        "column": 8,
                        "charIndex": 811
                      }
                    }
                  },
                  "location": {
                    "start": {
                      "line": 33,
                      "column": 7,
                      "charIndex": 631
                    },
                    "end": {
                      "line": 36,
                      "column": 8,
                      "charIndex": 811
                    }
                  }
                },
                {
                  "kind": "OutcomeStatement",
                  "isError": false,
                  "terminateFlow": false,
                  "value": {
                    "kind": "JessieExpression",
                    "expression": "body.responses.map(function (res) {\n    return {\n        faces: res.faceAnnotations.map(function (faceAnnotation) {\n            var resolveLikelihood = function (value) {\n                if (value === 'VERY_UNLIKELY') {\n                    return 'veryUnlikely';\n                }\n                if (value === 'UNLIKELY') {\n                    return 'unlikely';\n                }\n                if (value === 'POSSIBLE') {\n                    return 'possible';\n                }\n                if (value === 'LIKELY') {\n                    return 'likely';\n                }\n                if (value === 'VERY_LIKELY') {\n                    return 'verylikely';\n                }\n                return 'unknown';\n            };\n            return {\n                faceRectangle: {\n                    bottomLeft: { x: faceAnnotation.boundingPoly.vertices[0].x, y: faceAnnotation.boundingPoly.vertices[0].y },\n                    bottomRight: { x: faceAnnotation.boundingPoly.vertices[1].x, y: faceAnnotation.boundingPoly.vertices[1].y },\n                    topRight: { x: faceAnnotation.boundingPoly.vertices[2].x, y: faceAnnotation.boundingPoly.vertices[2].y },\n                    topLeft: { x: faceAnnotation.boundingPoly.vertices[3].x, y: faceAnnotation.boundingPoly.vertices[3].y },\n                },\n                landmarks: faceAnnotation.landmarks.map(function (landmark) {\n                    //Left eyebrow\n                    if (landmark.type === 'LEFT_OF_LEFT_EYEBROW') {\n                        return {\n                            kind: 'eyebrowLeftOuter',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    if (landmark.type === 'RIGHT_OF_LEFT_EYEBROW') {\n                        return {\n                            kind: 'eyebrowLeftInner',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    //Right eyebrow\n                    if (landmark.type === 'RIGHT_OF_RIGHT_EYEBROW') {\n                        return {\n                            kind: 'eyebrowRightOuter',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    if (landmark.type === 'LEFT_OF_RIGHTT_EYEBROW') {\n                        return {\n                            kind: 'eyebrowRightInner',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    //Mouth\n                    if (landmark.type === 'MOUTH_LEFT') {\n                        return {\n                            kind: 'mouthLeft',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    if (landmark.type === 'MOUTH_RIGHT') {\n                        return {\n                            kind: 'mouthRight',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    //Nose\n                    if (landmark.type === 'NOSE_BOTTOM_LEFT') {\n                        return {\n                            kind: 'noseRootLeft',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    if (landmark.type === 'NOSE_BOTTOM_RIGHT') {\n                        return {\n                            kind: 'noseRootRight',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    if (landmark.type === 'NOSE_TIP') {\n                        return {\n                            kind: 'noseTip',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    //Left eye\n                    if (landmark.type === 'LEFT_EYE') {\n                        return {\n                            kind: 'leftPupil',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    if (landmark.type === 'LEFT_EYE_TOP_BOUNDARY') {\n                        return {\n                            kind: 'eyeLeftTop',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    if (landmark.type === 'LEFT_EYE_RIGHT_CORNER') {\n                        return {\n                            kind: 'eyeLeftInner',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    if (landmark.type === 'LEFT_EYE_LEFT_CORNER') {\n                        return {\n                            kind: 'eyeLeftOuter',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    if (landmark.type === 'LEFT_EYE_BOTTOM_BOUNDARY') {\n                        return {\n                            kind: 'eyeLeftBottom',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    //Right eye \n                    if (landmark.type === 'RIGHT_EYE') {\n                        return {\n                            kind: 'rightPupil',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    if (landmark.type === 'RIGHT_EYE_TOP_BOUNDARY') {\n                        return {\n                            kind: 'eyeRightTop',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    if (landmark.type === 'RIGHT_EYE_LEFT_CORNER') {\n                        return {\n                            kind: 'eyeRightInner',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    if (landmark.type === 'RIGHT_EYE_RIGHT_CORNER') {\n                        return {\n                            kind: 'eyeRightOuter',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                    if (landmark.type === 'RIGHT_EYE_BOTTOM_BOUNDARY') {\n                        return {\n                            kind: 'eyeRightBottom',\n                            x: landmark.position.x,\n                            y: landmark.position.y\n                        };\n                    }\n                }).filter(function (landmark) { return landmark !== undefined; }),\n                emotions: {\n                    happiness: resolveLikelihood(faceAnnotation.joyLikelihood),\n                    anger: resolveLikelihood(faceAnnotation.angerLikelihood),\n                    sadness: resolveLikelihood(faceAnnotation.sorrowLikelihood),\n                    surprise: resolveLikelihood(faceAnnotation.surpriseLikelihood)\n                }\n            };\n        })\n    };\n})",
                    "source": "body.responses.map((res) => {\n        return {\n          faces: res.faceAnnotations.map((faceAnnotation) => {\n            const resolveLikelihood = (value) => {\n                if(value === 'VERY_UNLIKELY') {\n                    return 'veryUnlikely'\n                }\n\n                if(value === 'UNLIKELY') {\n                    return 'unlikely'\n                }\n\n                if(value === 'POSSIBLE') {\n                    return 'possible'\n                }\n\n                if(value === 'LIKELY') {\n                    return 'likely'\n                }\n\n                if(value === 'VERY_LIKELY') {\n                    return 'verylikely'\n                }\n\n              return 'unknown'                \n            }\n\n            return {\n                faceRectangle: {\n                    bottomLeft: {x: faceAnnotation.boundingPoly.vertices[0].x, y: faceAnnotation.boundingPoly.vertices[0].y},\n                    bottomRight: {x: faceAnnotation.boundingPoly.vertices[1].x, y: faceAnnotation.boundingPoly.vertices[1].y},\n                    topRight: {x: faceAnnotation.boundingPoly.vertices[2].x, y: faceAnnotation.boundingPoly.vertices[2].y},\n                    topLeft: {x: faceAnnotation.boundingPoly.vertices[3].x, y: faceAnnotation.boundingPoly.vertices[3].y},\n                },\n                landmarks: faceAnnotation.landmarks.map((landmark) => {\n                  //Left eyebrow\n                  if(landmark.type === 'LEFT_OF_LEFT_EYEBROW') {\n                    return {\n                      kind: 'eyebrowLeftOuter',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }\n                  if(landmark.type === 'RIGHT_OF_LEFT_EYEBROW') {\n                    return {\n                      kind: 'eyebrowLeftInner',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }\n                  //Right eyebrow\n                  if(landmark.type === 'RIGHT_OF_RIGHT_EYEBROW') {\n                    return {\n                      kind: 'eyebrowRightOuter',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }                        \n                  if(landmark.type === 'LEFT_OF_RIGHTT_EYEBROW') {\n                    return {\n                      kind: 'eyebrowRightInner',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }\n                  //Mouth\n                  if(landmark.type === 'MOUTH_LEFT') {\n                    return {\n                      kind: 'mouthLeft',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }\n                  if(landmark.type === 'MOUTH_RIGHT') {\n                    return {\n                      kind: 'mouthRight',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }\n                  //Nose\n                  if(landmark.type === 'NOSE_BOTTOM_LEFT') {\n                    return {\n                      kind: 'noseRootLeft',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }                        \n                  if(landmark.type === 'NOSE_BOTTOM_RIGHT') {\n                    return {\n                      kind: 'noseRootRight',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  } \n                  if(landmark.type === 'NOSE_TIP') {\n                    return {\n                      kind: 'noseTip',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }\n                  //Left eye\n                  if(landmark.type === 'LEFT_EYE') {\n                    return {\n                      kind: 'leftPupil',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }\n                  if(landmark.type === 'LEFT_EYE_TOP_BOUNDARY') {\n                    return {\n                      kind: 'eyeLeftTop',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }\n                  if(landmark.type === 'LEFT_EYE_RIGHT_CORNER') {\n                    return {\n                      kind: 'eyeLeftInner',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }\n                  if(landmark.type === 'LEFT_EYE_LEFT_CORNER') {\n                    return {\n                      kind: 'eyeLeftOuter',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }\n                  if(landmark.type === 'LEFT_EYE_BOTTOM_BOUNDARY') {\n                    return {\n                      kind: 'eyeLeftBottom',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }\n                  //Right eye \n                  if(landmark.type === 'RIGHT_EYE') {\n                    return {\n                      kind: 'rightPupil',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }                        \n                  if(landmark.type === 'RIGHT_EYE_TOP_BOUNDARY') {\n                    return {\n                      kind: 'eyeRightTop',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }\n                  if(landmark.type === 'RIGHT_EYE_LEFT_CORNER') {\n                    return {\n                      kind: 'eyeRightInner',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }\n                  if(landmark.type === 'RIGHT_EYE_RIGHT_CORNER') {\n                    return {\n                      kind: 'eyeRightOuter',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }\n                  if(landmark.type === 'RIGHT_EYE_BOTTOM_BOUNDARY') {\n                    return {\n                      kind: 'eyeRightBottom',\n                      x: landmark.position.x,\n                      y: landmark.position.y\n                    }\n                  }                       \n              }).filter((landmark) => landmark !== undefined),\n\n              emotions: {\n                happiness: resolveLikelihood(faceAnnotation.joyLikelihood),\n                anger: resolveLikelihood(faceAnnotation.angerLikelihood),\n                sadness: resolveLikelihood(faceAnnotation.sorrowLikelihood),\n                surprise: resolveLikelihood(faceAnnotation.surpriseLikelihood)\n              }\n            }\n          })\n        }\n      })",
                    "sourceMap": "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",
                    "location": {
                      "start": {
                        "line": 38,
                        "column": 18,
                        "charIndex": 830
                      },
                      "end": {
                        "line": 223,
                        "column": 9,
                        "charIndex": 8054
                      }
                    }
                  },
                  "location": {
                    "start": {
                      "line": 38,
                      "column": 7,
                      "charIndex": 819
                    },
                    "end": {
                      "line": 223,
                      "column": 9,
                      "charIndex": 8054
                    }
                  }
                }
              ],
              "location": {
                "start": {
                  "line": 32,
                  "column": 5,
                  "charIndex": 614
                },
                "end": {
                  "line": 224,
                  "column": 6,
                  "charIndex": 8060
                }
              }
            }
          ],
          "location": {
            "start": {
              "line": 8,
              "column": 3,
              "charIndex": 137
            },
            "end": {
              "line": 225,
              "column": 4,
              "charIndex": 8064
            }
          }
        }
      ],
      "location": {
        "start": {
          "line": 7,
          "column": 1,
          "charIndex": 115
        },
        "end": {
          "line": 226,
          "column": 2,
          "charIndex": 8066
        }
      },
      "documentation": {
        "title": "FaceDetection map",
        "location": {
          "start": {
            "line": 4,
            "column": 1,
            "charIndex": 89
          },
          "end": {
            "line": 6,
            "column": 4,
            "charIndex": 114
          }
        }
      }
    }
  ],
  "location": {
    "start": {
      "line": 1,
      "column": 1,
      "charIndex": 0
    },
    "end": {
      "line": 226,
      "column": 2,
      "charIndex": 8066
    }
  },
  "astMetadata": {
    "astVersion": {
      "major": 1,
      "minor": 2,
      "patch": 0
    },
    "parserVersion": {
      "major": 1,
      "minor": 2,
      "patch": 0
    },
    "sourceChecksum": "cf96e729100099b90df46c9e900124b65da028ac3da4b781e33c0b1dde502589"
  }
}