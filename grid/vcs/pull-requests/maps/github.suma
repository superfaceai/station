profile = "vcs/pull-requests@2.0"
provider = "github"
  
"""
PullRequests map. Retruns all pull requests from specified repository od specified user
"""
map PullRequests{
  owner = input.owner
  repo = input.repo

  call Paginate(
  owner = input.owner,
  repo = input.repo,
  ) {
    return map error if (outcome.error) outcome.error
    return map result outcome.data
  }
}

operation Paginate {
  data = []
  page = 1
  // FIXME: Hack to create a while loop. Use Superface stdlib instead
  call foreach(_x of Array(1000)) FetchPullRequests(owner = args.owner, repo = args.repo, page = page) {
    fail if (outcome.error) outcome.error

    data = [...data, ...outcome.data.pullRequests]

    page = page + 1
    return if (outcome.data.isLastPage) {
      pullRequests: data,
      statusCode: 200
    }
  }
  return {
    pullRequests: data,
    statusCode: 200
  }
}
operation FetchPullRequests {
  http GET "/repos/{args.owner}/{args.repo}/pulls" {
    request {
      query {
        page = args.page,
        state = 'all'
      }
    }
    response {
      fail if(statusCode !== 200){
        message: body.message,
        description: body.documentation_url,
        statusCode: statusCode
      }

      return {
        pullRequests: body.map((pr) => {
          return {
            title: pr.title,
            id: pr.id,
            url: pr.url,
            sha: pr.head.sha,
          }
        }),
        statusCode: statusCode,
        isLastPage:  !headers.link || !headers.link.includes('rel="next"')
      }
    }
  }
}
  